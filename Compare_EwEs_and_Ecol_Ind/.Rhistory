data_raw = "EwE_2013_network_analysis_keystoneness",
select_species = "Cod<= 35 cm")
Keystone_RTI_species_function(EwE_period = "EwE_2013",
data_raw = "EwE_2013_network_analysis_keystoneness",
select_species = "Capelin")
Keystone_RTI_species_function(EwE_period = "EwE_2013",
data_raw = "EwE_2013_network_analysis_keystoneness",
select_species = "Seal Harp")
# Chunk 43: EwE_2020_2J3K_index_Keystone_Relative_total_impact
Keystone_RTI_species_function(EwE_period = "EwE_2020_2J3K",
data_raw = "EwE_2020_2J3K_network_analysis_keystoneness",
select_species = "Cod> 35 cm")
Keystone_RTI_species_function(EwE_period = "EwE_2020_2J3K",
data_raw = "EwE_2020_2J3K_network_analysis_keystoneness",
select_species = "Cod<= 35 cm")
Keystone_RTI_species_function(EwE_period = "EwE_2020_2J3K",
data_raw = "EwE_2020_2J3K_network_analysis_keystoneness",
select_species = "Capelin")
Keystone_RTI_species_function(EwE_period = "EwE_2020_2J3K",
data_raw = "EwE_2020_2J3K_network_analysis_keystoneness",
select_species = "Seal Harp")
# Chunk 44: EwE_2020_3LNO_index_Keystone_Relative_total_impact
Keystone_RTI_species_function(EwE_period = "EwE_2020_3LNO",
data_raw = "EwE_2020_3LNO_network_analysis_keystoneness",
select_species = "Cod> 35 cm")
Keystone_RTI_species_function(EwE_period = "EwE_2020_3LNO",
data_raw = "EwE_2020_3LNO_network_analysis_keystoneness",
select_species = "Cod<= 35 cm")
Keystone_RTI_species_function(EwE_period = "EwE_2020_3LNO",
data_raw = "EwE_2020_3LNO_network_analysis_keystoneness",
select_species = "Capelin")
Keystone_RTI_species_function(EwE_period = "EwE_2020_3LNO",
data_raw = "EwE_2020_3LNO_network_analysis_keystoneness",
select_species = "Seal Harp")
# Chunk 45: EwE_1985_relative_biomass
EwE_1985_harp_seal_biomass <- 0.4*0.534
EwE_1985_cod_all_biomass <- 3.576 + 0.9584337
EwE_1985_cod_sup_35_biomass <- 3.576
EwE_1985_cod_inf_35_biomass <- 0.9584337
EwE_1985_capelin_biomass <- 13.76607
EwE_1985_total_biomass <- 299.0202
EwE_1985_harp_seal_relative_biomass <- (EwE_1985_harp_seal_biomass / EwE_1985_total_biomass)* 100
EwE_1985_cod_all_relative_biomass <- (EwE_1985_cod_all_biomass / EwE_1985_total_biomass)* 100
EwE_1985_cod_sup_35_relative_biomass <- (EwE_1985_cod_sup_35_biomass / EwE_1985_total_biomass)* 100
EwE_1985_cod_inf_35_relative_biomass <- (EwE_1985_cod_inf_35_biomass / EwE_1985_total_biomass)* 100
EwE_1985_capelin_relative_biomass <- (EwE_1985_capelin_biomass / EwE_1985_total_biomass)* 100
# Chunk 46: EwE_2013_relative_biomass
EwE_2013_harp_seal_biomass <- 0.4 * 0.665
EwE_2013_cod_all_biomass <- 0.76 + 0.03806696
EwE_2013_cod_sup_35_biomass <- 0.76
EwE_2013_cod_inf_35_biomass <- 0.03806696
EwE_2013_capelin_biomass <- 4.97
EwE_2013_total_biomass <- 256.4975
EwE_2013_harp_seal_relative_biomass <- (EwE_2013_harp_seal_biomass / EwE_2013_total_biomass)* 100
EwE_2013_cod_all_relative_biomass <- (EwE_2013_cod_all_biomass / EwE_2013_total_biomass)* 100
EwE_2013_cod_sup_35_relative_biomass <- (EwE_2013_cod_sup_35_biomass / EwE_2013_total_biomass)* 100
EwE_2013_cod_inf_35_relative_biomass <- (EwE_2013_cod_inf_35_biomass / EwE_2013_total_biomass)* 100
EwE_2013_capelin_relative_biomass <- (EwE_2013_capelin_biomass / EwE_2013_total_biomass)* 100
# Chunk 47: EwE_2020_2J3K_relative_biomass
EwE_2020_2J3K_harp_seal_biomass <- 0.4 * 0.707
EwE_2020_2J3K_cod_all_biomass <- 2.18 + 0.200149
EwE_2020_2J3K_cod_sup_35_biomass <- 2.18
EwE_2020_2J3K_cod_inf_35_biomass <- 0.200149
EwE_2020_2J3K_capelin_biomass <- 3.05
EwE_2020_2J3K_total_biomass <- 254.1454
EwE_2020_2J3K_harp_seal_relative_biomass <- (EwE_2020_2J3K_harp_seal_biomass / EwE_2020_2J3K_total_biomass)* 100
EwE_2020_2J3K_cod_all_relative_biomass <- (EwE_2020_2J3K_cod_all_biomass / EwE_2020_2J3K_total_biomass)* 100
EwE_2020_2J3K_cod_sup_35_relative_biomass <- (EwE_2020_2J3K_cod_sup_35_biomass / EwE_2020_2J3K_total_biomass)* 100
EwE_2020_2J3K_cod_inf_35_relative_biomass <- (EwE_2020_2J3K_cod_inf_35_biomass / EwE_2020_2J3K_total_biomass)* 100
EwE_2020_2J3K_capelin_relative_biomass <- (EwE_2020_2J3K_capelin_biomass / EwE_2020_2J3K_total_biomass)* 100
# Chunk 48: EwE_2020_3LNO_relative_biomass
EwE_2020_3LNO_harp_seal_biomass <- 0.4 * 0.652
EwE_2020_3LNO_cod_all_biomass <- 0.568 + 0.05214892
EwE_2020_3LNO_cod_sup_35_biomass <- 0.568
EwE_2020_3LNO_cod_inf_35_biomass <- 0.05214892
EwE_2020_3LNO_capelin_biomass <- 3.5
EwE_2020_3LNO_total_biomass <- 259.8602
EwE_2020_3LNO_harp_seal_relative_biomass <- (EwE_2020_3LNO_harp_seal_biomass / EwE_2020_3LNO_total_biomass)* 100
EwE_2020_3LNO_cod_all_relative_biomass <- (EwE_2020_3LNO_cod_all_biomass / EwE_2020_3LNO_total_biomass)* 100
EwE_2020_3LNO_cod_sup_35_relative_biomass <- (EwE_2020_3LNO_cod_sup_35_biomass / EwE_2020_3LNO_total_biomass)* 100
EwE_2020_3LNO_cod_inf_35_relative_biomass <- (EwE_2020_3LNO_cod_inf_35_biomass / EwE_2020_3LNO_total_biomass)* 100
EwE_2020_3LNO_capelin_relative_biomass <- (EwE_2020_3LNO_capelin_biomass / EwE_2020_3LNO_total_biomass)* 100
# Chunk 49: Ecosystem_scale_summary_table
Ecosystem_scale_summary_table_function()
# Chunk 50: calcul_percentage_change
calcul_percentage_change(Ecosystem_scale_summary_table)
# Chunk 51: Species_scale_summary_table
Species_scale_summary_table_function()
# Chunk 52: plot_ecosystem_key_figure
plot_ecosystem_key_figure_function()
# Chunk 53: LoD_data_import
import_all_xlsx_files_LoD_simulation_function("Raw_data_LoD_import")
# Chunk 54: Rank_avg_impact_function
Rank_avg_impact_function(LoD_select = "LoD_60")
# Chunk 55: Species_scale_summary_table_large
Species_scale_summary_table_large_publication()
# Chunk 56: KEY1_RTI_plot
key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "RTI",
yaxis = "Key_1",
xlab = "Relative Total Impact (RTI)",
ylab = "Keystoneness #1")
# Chunk 57: KEY2_RTI_plot
key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "RTI",
yaxis = "Key_2",
xlab = "Relative Total Impact (RTI)",
ylab = "Keystoneness #2")
# Chunk 58: KEY1_KEY2_plot
key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "Key_1",
yaxis = "Key_2",
xlab = "Keystoneness #1",
ylab = "Keystoneness #2")
# Chunk 59: relative_biomass_rank_plot
key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "Relative_Biomass",
yaxis = "Rank",
xlab = "Relative abundance (% of total biomass)",
ylab = "Rank of largest effect")
# Chunk 60: conectance_rank_plot
key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "Connectance",
yaxis = "Rank",
xlab = "Connectance",
ylab = "Rank of largest effect")
# Chunk 61: key1_rank_plot
key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "Key_1",
yaxis = "Rank",
xlab = "Keystoneness #1",
ylab = "Rank of largest effect")
# Chunk 62: key2_rank_plot
key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "Key_2",
yaxis = "Rank",
xlab = "Keystoneness #2",
ylab = "Rank of largest effect")
# Chunk 63: TL_rank_plot
key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "TL",
yaxis = "Rank",
xlab = "Trophic Level",
ylab = "Rank of largest effect")
# Chunk 64: SURF_rank_plot
key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "SURF",
yaxis = "Rank",
xlab = "SURF index",
ylab = "Rank of largest effect")
# Chunk 65: OI_rank_plot
key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "OI",
yaxis = "Rank",
xlab = "Omnivory index",
ylab = "Rank of largest effect")
# Chunk 66: relative_biomass_avg_eco_impact_plot
key_fig_ecol_ind_avg_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "Relative_Biomass",
yaxis = "Avg_impact",
xlab = "Relative Biomass",
ylab = "Avg. ecosystem impact")
# Chunk 67: connectance_avg_eco_impact_plot
key_fig_ecol_ind_avg_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "Connectance",
yaxis = "Avg_impact",
xlab = "Connectance",
ylab = "Avg. ecosystem impact")
# Chunk 68: key1_avg_eco_impact_plot
key_fig_ecol_ind_avg_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "Key_1",
yaxis = "Avg_impact",
xlab = "Keystoneness #1",
ylab = "Avg. ecosystem impact")
# Chunk 69: key2_avg_eco_impact_plot
key_fig_ecol_ind_avg_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "Key_2",
yaxis = "Avg_impact",
xlab = "Keystoneness #2",
ylab = "Avg. ecosystem impact")
# Chunk 70: TL_avg_eco_impact_plot
key_fig_ecol_ind_avg_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "TL",
yaxis = "Avg_impact",
xlab = "Trophic Level",
ylab = "Avg. ecosystem impact")
# Chunk 71: SURF_avg_eco_impact_plot
key_fig_ecol_ind_avg_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "SURF",
yaxis = "Avg_impact",
xlab = "SURF index",
ylab = "Avg. ecosystem impact")
# Chunk 72: OI_avg_eco_impact_plot
key_fig_ecol_ind_avg_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "OI",
yaxis = "Avg_impact",
xlab = "Omnivory Index",
ylab = "Avg. ecosystem impact")
# Chunk 73: Selected_multi_panel_short
Selected_multi_panel_function(short_or_long = "short")
# Chunk 74: Selected_multi_panel_long
Selected_multi_panel_function(short_or_long = "long")
Selected_multi_panel_function(short_or_long = "short")
Selected_multi_panel_function(short_or_long = "long")x
Selected_multi_panel_function(short_or_long = "long")
Species_scale_summary_table_large
Species_scale_summary_table_large
Species_scale_summary_table_large <- Species_scale_summary_table_large %>%
mutate(`Periods-Areas` = case_when(
`Periods-Areas` == "2018-2020 2J3K" ~ "2018-2020 NL Shelf",
`Periods-Areas` == "2018-2020 3LNO" ~ "2018-2020 Grand Banks",
TRUE ~ `Periods-Areas`
))
Species_scale_summary_table_large
Selected_multi_panel_function <- function(short_or_long) {
Species_scale_summary_table_large <- Species_scale_summary_table_large %>%
mutate(`Periods-Areas` = case_when(
`Periods-Areas` == "2018-2020 2J3K" ~ "2018-2020 NL Shelf",
`Periods-Areas` == "2018-2020 3LNO" ~ "2018-2020 Grand Banks",
TRUE ~ `Periods-Areas`
))
key2_rti <- key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "RTI",
yaxis = "Key_2",
xlab = "Relative Total Impact",
ylab = "Keystoneness #2") + ggtitle("a)")
rank_ra <- key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "Relative_Biomass",
yaxis = "Rank",
xlab = "Relative Biomass",
ylab = "Rank of largest effect") + ggtitle("b)")
rank_key2 <- key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "Key_2",
yaxis = "Rank",
xlab = "Keystoneness #2",
ylab = "Rank of largest effect") + ggtitle("c)")
rank_surf <- key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "SURF",
yaxis = "Rank",
xlab = "SURF index",
ylab = "Rank of largest effect") + ggtitle("d)")
avg_rb <- key_fig_ecol_ind_avg_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "Relative_Biomass",
yaxis = "Avg_impact",
xlab = "Relative Biomass",
ylab = "Avg. ecosystem impact") + ggtitle("e)")
avg_surf <- key_fig_ecol_ind_avg_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "SURF",
yaxis = "Avg_impact",
xlab = "SURF index",
ylab = "Avg. ecosystem impact") + ggtitle("f)")
combined_plot_short <- (key2_rti + rank_ra +
rank_key2 + rank_surf) +
plot_layout(ncol = 2, guides = "collect")
combined_plot_long <- (key2_rti + rank_ra +
rank_key2 + rank_surf +
avg_rb + avg_surf) +
plot_layout(ncol = 2, guides = "collect")
# Utilisation de if/else pour retourner le bon graphique
if (short_or_long == "short") {
return(combined_plot_short)
} else if (short_or_long == "long") {
return(combined_plot_long)
} else {
stop("Invalid input: please specify 'short' or 'long'")
}
}
Selected_multi_panel_function(short_or_long = "short")
Selected_multi_panel_function <- function(short_or_long) {
Species_scale_summary_table_large <- Species_scale_summary_table_large %>%
mutate(`Periods-Areas` = case_when(
`Periods-Areas` == "2018-2020 2J3K" ~ "2018-2020 NL Shelf",
`Periods-Areas` == "2018-2020 3LNO" ~ "2018-2020 Grand Banks",
TRUE ~ `Periods-Areas`
))
key2_rti <- key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "RTI",
yaxis = "Key_2",
xlab = "Relative Total Impact",
ylab = "Keystoneness #2") + ggtitle("a)")
rank_ra <- key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "Relative_Biomass",
yaxis = "Rank",
xlab = "Relative Biomass",
ylab = "Rank of largest effect") + ggtitle("b)")
rank_key2 <- key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "Key_2",
yaxis = "Rank",
xlab = "Keystoneness #2",
ylab = "Rank of largest effect") + ggtitle("c)")
rank_surf <- key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "SURF",
yaxis = "Rank",
xlab = "SURF index",
ylab = "Rank of largest effect") + ggtitle("d)")
avg_rb <- key_fig_ecol_ind_avg_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "Relative_Biomass",
yaxis = "Avg_impact",
xlab = "Relative Biomass",
ylab = "Avg. ecosystem impact") + ggtitle("e)")
avg_surf <- key_fig_ecol_ind_avg_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "SURF",
yaxis = "Avg_impact",
xlab = "SURF index",
ylab = "Avg. ecosystem impact") + ggtitle("f)")
combined_plot_short <- (key2_rti + rank_ra +
rank_key2 + rank_surf) +
plot_layout(ncol = 2, guides = "collect")
combined_plot_long <- (key2_rti + rank_ra +
rank_key2 + rank_surf +
avg_rb + avg_surf) +
plot_layout(ncol = 2, guides = "collect")
# Utilisation de if/else pour retourner le bon graphique
if (short_or_long == "short") {
return(combined_plot_short)
} else if (short_or_long == "long") {
return(combined_plot_long)
} else {
stop("Invalid input: please specify 'short' or 'long'")
}
}
Selected_multi_panel_function(short_or_long = "short")
Selected_multi_panel_function(short_or_long = "long")
# Generic plot function Ecological indicator Key figure
key_fig_ecol_ind_avg_function <- function(ecol_ind_data, xaxis, yaxis, xlab, ylab) {
data_clean <- ecol_ind_data %>% filter(!Species %in% "Cod all")
data_regression <- data.frame(x = data_clean[[xaxis]], y = predict(lm(formula = as.formula(paste(yaxis, "~", xaxis)), data = data_clean), newdata = data_clean))
rsquare <- summary(lm(formula = as.formula(paste(yaxis, "~", xaxis)), data = data_clean))$r.squared
pvalue <- summary(lm(formula = as.formula(paste(yaxis, "~", xaxis)), data = ecol_ind_data))$coefficients[2, 4]
r_squared_text <- paste("R² = ", sprintf("%.2f", rsquare), "; P-value =", sprintf("%.2f", pvalue))
gplot <- ggplot(data_clean, aes(x = !!sym(xaxis), y = !!sym(yaxis), color = `Periods-Areas`, shape = Species)) +
geom_point(size = 5) +
geom_line(data = data_regression, aes(y = y, x = x), color = "black", inherit.aes = FALSE) +
annotate("text",
x = max(data_clean[[xaxis]], na.rm = TRUE) / 2,
y = max(data_clean[[yaxis]], na.rm = TRUE)* 9/10,
label = r_squared_text,
hjust = 0.5,
vjust = -0.5,
size = 4,
color = "black") +
scale_color_manual(values = c("1985-1987" = "#ef476f", "2013-2015" = "#f4a261", "2018-2020 NL Shelf" = "#06d6a0", "2018-2020 Grand Banks" = "#0077b6")) +
scale_shape_manual(values = c("Harp seal" = 10, "Cod > 35cm" = 16, "Cod ≤ 35cm" = 17, "Capelin" = 8)) +
labs(x = xlab,
y = ylab,
color = "Periods-Areas",
shape = "Species") +
theme_bw() +
theme(axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 16),
legend.text = element_text(size = 11),
legend.title = element_text(size = 13))
return(gplot)
}
# Generic plot function Ecological indicator Key figure
key_fig_ecol_ind_rank_function <- function(ecol_ind_data, xaxis, yaxis, xlab, ylab) {
data_clean <- ecol_ind_data %>% filter(!Species %in% "Cod all")
xaxis_sym <- sym(xaxis)
yaxis_sym <- sym(yaxis)
gplot <- ggplot(data_clean, aes(x = !!xaxis_sym, y = !!yaxis_sym, color = `Periods-Areas`, shape = Species)) +
geom_point(size = 5) +
scale_color_manual(values = c("1985-1987" = "#ef476f", "2013-2015" = "#f4a261", "2018-2020 NL Shelf" = "#06d6a0", "2018-2020 Grand Banks" = "#0077b6")) +
scale_shape_manual(values = c("Harp seal" = 10, "Cod > 35cm" = 16, "Cod ≤ 35cm" = 17, "Capelin" = 8)) +
labs(x = xlab,
y = ylab,
color = "Periods-Areas",
shape = "Species") +
theme_bw() +
theme(axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 16),
legend.text = element_text(size = 11),
legend.title = element_text(size = 13))
return(gplot)
}
# Generic plot function Ecological indicator Key figure
key_fig_ecol_ind_avg_function <- function(ecol_ind_data, xaxis, yaxis, xlab, ylab) {
data_clean <- ecol_ind_data %>% filter(!Species %in% "Cod all")
data_regression <- data.frame(x = data_clean[[xaxis]], y = predict(lm(formula = as.formula(paste(yaxis, "~", xaxis)), data = data_clean), newdata = data_clean))
rsquare <- summary(lm(formula = as.formula(paste(yaxis, "~", xaxis)), data = data_clean))$r.squared
pvalue <- summary(lm(formula = as.formula(paste(yaxis, "~", xaxis)), data = ecol_ind_data))$coefficients[2, 4]
r_squared_text <- paste("R² = ", sprintf("%.2f", rsquare), "; P-value =", sprintf("%.2f", pvalue))
gplot <- ggplot(data_clean, aes(x = !!sym(xaxis), y = !!sym(yaxis), color = `Periods-Areas`, shape = Species)) +
geom_point(size = 5) +
geom_line(data = data_regression, aes(y = y, x = x), color = "black", inherit.aes = FALSE) +
annotate("text",
x = max(data_clean[[xaxis]], na.rm = TRUE) / 2,
y = max(data_clean[[yaxis]], na.rm = TRUE)* 9/10,
label = r_squared_text,
hjust = 0.5,
vjust = -0.5,
size = 4,
color = "black") +
scale_color_manual(values = c("1985-1987" = "#ef476f", "2013-2015" = "#f4a261", "2018-2020 NL Shelf" = "#06d6a0", "2018-2020 Grand Banks" = "#0077b6")) +
scale_shape_manual(values = c("Harp seal" = 10, "Cod > 35cm" = 16, "Cod ≤ 35cm" = 17, "Capelin" = 8)) +
labs(x = xlab,
y = ylab,
color = "Periods-Areas",
shape = "Species") +
theme_bw() +
theme(axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
plot.title = element_text(size = 16),
legend.text = element_text(size = 11),
legend.title = element_text(size = 13))
return(gplot)
}
Selected_multi_panel_function <- function(short_or_long) {
Species_scale_summary_table_large <- Species_scale_summary_table_large %>%
mutate(`Periods-Areas` = case_when(
`Periods-Areas` == "2018-2020 2J3K" ~ "2018-2020 NL Shelf",
`Periods-Areas` == "2018-2020 3LNO" ~ "2018-2020 Grand Banks",
TRUE ~ `Periods-Areas`
))
key2_rti <- key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "RTI",
yaxis = "Key_2",
xlab = "Relative Total Impact",
ylab = "Keystoneness #2") + ggtitle("a)")
rank_ra <- key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "Relative_Biomass",
yaxis = "Rank",
xlab = "Relative Biomass",
ylab = "Rank of largest effect") + ggtitle("b)")
rank_key2 <- key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "Key_2",
yaxis = "Rank",
xlab = "Keystoneness #2",
ylab = "Rank of largest effect") + ggtitle("c)")
rank_surf <- key_fig_ecol_ind_rank_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "SURF",
yaxis = "Rank",
xlab = "SURF index",
ylab = "Rank of largest effect") + ggtitle("d)")
avg_rb <- key_fig_ecol_ind_avg_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "Relative_Biomass",
yaxis = "Avg_impact",
xlab = "Relative Biomass",
ylab = "Avg. ecosystem impact") + ggtitle("e)")
avg_surf <- key_fig_ecol_ind_avg_function(ecol_ind_data = Species_scale_summary_table_large,
xaxis = "SURF",
yaxis = "Avg_impact",
xlab = "SURF index",
ylab = "Avg. ecosystem impact") + ggtitle("f)")
combined_plot_short <- (key2_rti + rank_ra +
rank_key2 + rank_surf) +
plot_layout(ncol = 2, guides = "collect")
combined_plot_long <- (key2_rti + rank_ra +
rank_key2 + rank_surf +
avg_rb + avg_surf) +
plot_layout(ncol = 2, guides = "collect")
# Utilisation de if/else pour retourner le bon graphique
if (short_or_long == "short") {
return(combined_plot_short)
} else if (short_or_long == "long") {
return(combined_plot_long)
} else {
stop("Invalid input: please specify 'short' or 'long'")
}
}
Selected_multi_panel_function(short_or_long = "short")
Selected_multi_panel_function(short_or_long = "long")
install_and_load_packages <- function() {
# List of packages to be installed and loaded
packages <- c("tidyverse", "gridExtra", "knitr", "writexl", "openxlsx", "here", "scales", "DT", "ggpubr", "patchwork")
# Function to install and load a package
install_and_load <- function(package_name) {
if (!requireNamespace(package_name, quietly = TRUE)) {
message(paste("Package", package_name, "is not installed. Installing..."))
install.packages(package_name, dependencies = TRUE)
}
message(paste("Loading package", package_name, "..."))
suppressMessages(library(package_name, character.only = TRUE))
}
# Loop through the list of packages
for (pkg_name in packages) {
install_and_load(pkg_name)
}
}
# Call the function to install and load packages
install_and_load_packages()
sessionInfo()
# Packages utilisés
packages <- c("tidyverse", "gridExtra", "knitr", "writexl", "openxlsx",
"here", "scales", "DT", "ggpubr", "patchwork")
# Extraire uniquement les versions des packages utilisés
package_versions <- installed.packages()[packages, c("Package", "Version")]
package_versions_df <- as.data.frame(package_versions, stringsAsFactors = FALSE)
# Écrire dans le README
cat("## Packages utilisés avec leurs versions\n\n")
apply(package_versions_df, 1, function(row) cat("*", row[1], ":", row[2], "\n"))
library(raster)    # For handling raster data
library(sf)        # For spatial data manipulation
library(marmap)    # For downloading bathymetric data (getNOAA.bathy)
library(ggspatial) # for annotate scale and north arrow
# Packages utilisés
packages <- c("tidyverse", "gridExtra", "knitr", "writexl", "openxlsx",
"here", "scales", "DT", "ggpubr", "patchwork", 'raster', "sf", "marmap", "ggspatial")
# Extraire uniquement les versions des packages utilisés
package_versions <- installed.packages()[packages, c("Package", "Version")]
package_versions_df <- as.data.frame(package_versions, stringsAsFactors = FALSE)
# Écrire dans le README
cat("## Packages utilisés avec leurs versions\n\n")
apply(package_versions_df, 1, function(row) cat("*", row[1], ":", row[2], "\n"))
sessionInfo()
